/**
 * Author : A.Lepe (dev@alepe.com)
 * License: MIT
 * Version: 0.1.8
 * Updated: 2024-12-11
 * Content: ndjson-player.min.js (Bundle Minimized)
 */

!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():e.m2d2=t()}(this,(function(){"use strict";class e{isString(e){return"string"==typeof e}isBool(e){return"boolean"==typeof e}isNumeric(e){return!isNaN(parseFloat(e))&&isFinite(e)}isSelectorID(e){return 0===(e+"").trim().indexOf("#")}isPlainObject(e){return"Object"===e.constructor.name}isObject(e){return"object"==typeof e}isArray(e){return Array.isArray(e)}isFunction(e){return"function"==typeof e}isElement(e){return e instanceof HTMLElement}isNode(e){return e instanceof Node||e instanceof DocumentFragment}isHtml(e){return-1!==(e+"").trim().indexOf("<")}isEmpty(e){return void 0===e||this.isObject(e)&&0===Object.keys(e).length||""===e}isVisible(e){if(!this.isElement(e))return console.log("(isVisible) Not an element: "),console.log(e),!1;const t="none"!==e.style.display,s="hidden"!==e.style.visibility;return t&&s}inView(e){const t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)&&t.width>0&&t.height>0}cleanArray(e){return e.filter((function(e){return 0===e||e}))}isValidElement(e){const t=this.newElement(e);return"template"!==e&&"HTMLUnknownElement"!==t.constructor.name}exists(e){return null!==document.querySelector(e)}getAttrOrProp(e,t){let s="";return this.hasAttrOrProp(e,t)&&(s=this.hasAttr(e,t)?e.getAttribute(t):e[t]),s}hasAttrOrProp(e,t){return this.hasAttr(e,t)||this.hasProp(e,t)}hasAttr(e,t){let s=!1;if(e&&!this.isNumeric(t))if("checked"===t)s=void 0!==e.type&&("radio"===e.type||"checkbox"===e.type);else s=void 0!==e.hasAttribute&&e.hasAttribute(t);return s}hasProp(e,t){let s=!1;if(e&&!this.isNumeric(t)){let i=void 0!==e[t];i&&null===e[t]&&"value"===t&&(i=!1),s=i&&!(e[t]instanceof Node)&&!e.hasAttribute(t)}return s}setPropOrAttr(e,t,s){if(this.hasProp(e,t))try{e[t]=s}catch(i){this.setAttr(e,t,s)}else this.setAttr(e,t,s)}setAttr(e,t,s){s?e.setAttribute(t,s):e.removeAttribute(t)}defineProp(e,t,s){this.isObject(e)&&void 0===e[t]&&(Object.defineProperty(e,t,{enumerable:!1,writable:!0}),e[t]=s)}htmlElement(e){const t=this.newElement("template");return t.innerHTML=e.trim(),t.content.firstChild}newElement(e){return document.createElement(e)}newEmptyNode(){return new DocumentFragment}getMethods(e){const t=Reflect.getPrototypeOf(e),s=Reflect.getPrototypeOf(t);return Reflect.ownKeys(t).filter((e=>Reflect.ownKeys(s).indexOf(e)<0))}appendAllChild(e,t){for(;e.firstChild;)t.append(e.firstChild)}prependAllChild(e,t){for(;e.firstChild;)t.prepend(e.firstChild)}}class t{"use strict";_stored={events:[],datasetNodes:[],datasets:[],styleNodes:[],styles:[]};static storedEventsTimeout=50;static short=!0;static updates=!0;static utils=new e;constructor(){}static instance=new t;static extensions={};static main=(()=>{const e=(e,s)=>{const i=this.instance.getProxyNode(e,s);return i&&i.onready&&t.utils.isFunction(i.onready)&&(i.addEventListener("ready",i.onready,{once:!0}),setTimeout((()=>{i.dispatchEvent(new CustomEvent("ready"))}),10)),["dataset","style"].forEach((e=>{i&&i[e]&&(this.instance._stored[e+"s"].push(i[e]),this.instance._stored[e+"Nodes"].push(i))})),i};return t.utils.getMethods(t.utils).forEach((s=>{e[s]=t.utils[s]})),e})();static ready(e){document.addEventListener("DOMContentLoaded",(()=>{e(t.main)}))}static load(e){if(void 0!==e){const s=e(t.main);t.utils.isObject(s)&&!t.utils.isEmpty(s)&&Object.keys(s).forEach((e=>{if(t.utils.isValidElement(e)){void 0===t.extensions[e]&&(t.extensions[e]={});const i=t.utils.newElement(e);Object.keys(s[e]).forEach((s=>{t.utils.hasProp(i,s)&&console.log("Warning: property ["+s+"] already exists in node: ["+e+"] while trying to extend it. Unexpected behaviour may happen.")})),Object.assign(t.extensions[e],s[e])}else{void 0===t.extensions["*"]&&(t.extensions["*"]={});const i=t.utils.newElement("div");Object.keys(s[e]).forEach((e=>{t.utils.hasProp(i,e)&&console.log("Warning: property ["+e+"] already exists in Node while trying to extend it. Unexpected behaviour may happen.")})),Object.assign(t.extensions["*"],s[e])}}))}return t.main}extDom(e,s){if(!e)return console.error("Selector was empty"),null;void 0===s&&(s=document);const i=t.utils.isNode(e)?e:s.querySelector(e);if(!i)return t.utils.isString(e)?(console.error("Selector: "+e+" didn't match any element in node:"),console.log(s)):console.error("Node was null"),null;if(void 0===i._m2d2){i._m2d2=!0,["parent","sibling","next","prev","find","findAll","onupdate","onready","show","onshow","inView","css","text","html","getData","index"].forEach((e=>{i.hasOwnProperty(e)&&(console.log("Node already had ["+e+"] property. It might cause unexpected behaviour."),console.log("You may need to update the M2D2 version or report it to: github.com/intellisrc/m2d2/"))})),Object.defineProperty(i,"text",{get(){return this.childNodes.length?this.innerText:this.textContent},set(e){if(this.childNodes.length){let t=!1;this.childNodes.forEach((s=>{"Text"===s.constructor.name&&(s.nodeValue=e,t=!0)})),t||this.prepend(document.createTextNode(e))}else this.textContent=e}}),Object.defineProperty(i,"html",{get(){return this.innerHTML},set(e){this.innerHTML=e}}),Object.defineProperty(i,"css",{get(){return this.classList},set(e){t.utils.isArray(e)?this.className=e.join(" "):t.utils.isString(e)?this.className=e:t.utils.isPlainObject(e)?Object.keys(e).forEach((t=>{e[t]?this.classList.add(t):this.classList.remove(t)})):console.error("Trying to assign a wrong value to css : "+e)}}),Object.defineProperty(i,"show",{get(){return t.utils.isVisible(this)},set(e){const s=()=>getComputedStyle(this,null).display,i=()=>{const e=document.getElementsByTagName("body")[0],t=document.createElement("template"),s=document.createElement(this.tagName);t.append(s),e.append(t);const i=getComputedStyle(s,null).display;return t.remove(),i};if(e){if("none"===s()){if(this._m2d2_display)this.style.display=this._m2d2_display;else if(this.style.removeProperty("display"),"none"===s()){const e=i();this.style.display=this.dataset.display||("none"!==e?e:"block")}void 0!==this.onshow&&t.utils.isFunction(this.onshow)&&this.onshow(this)}}else{const e="none"!==this.style.display?this.style.display:s();"none"!==e&&(this._m2d2_display=e),this.style.display="none"}}});let e={};return void 0!==t.extensions["*"]&&Object.assign(e,t.extensions["*"]),void 0!==t.extensions[i.tagName]&&Object.assign(e,t.extensions[i.tagName]),Object.assign(i,{inView:()=>t.utils.inView(i),next:()=>i.nextElementSibling,prev:()=>i.previousElementSibling,parent:()=>this.extDom(i.parentElement),sibling:e=>i.parentElement.find(e),find:e=>{const t=i.querySelector(e);return t?this.extDom(t):null},findAll:e=>{const t=void 0===e?Array.from(i.children):i.querySelectorAll(e);return t.forEach((e=>{this.extDom(e)})),t}},e),void 0===i.index&&(i.index=()=>Array.from(i.parentNode.children).indexOf(i)),["INPUT","TEXTAREA","SELECT"].indexOf(i.tagName)>=0&&t.utils.hasAttrOrProp(i,"value")&&(i.oninput=function(){this.setAttribute("value",this.value)}),"FORM"===i.tagName&&(i.getData=function(e){const t={},s=new FormData(this),n=e||!1;for(let e of s.entries()){const s=i.find("[name='"+e[0]+"']");(n||"hidden"===s.type||s.show)&&(t[e[0]]="file"===s.type?s.files:e[1])}return t}),i}return i}doDom(e,s){if(t.utils.isObject(e)&&void 0===s&&(s=e,e=t.utils.newEmptyNode(),void 0===s.warn&&(s.warn=!1)),!(t.utils.isString(e)||t.utils.isElement(e)||t.utils.isNode(e)))return console.error("Selector is not a string or a Node:"),console.log(e),null;if(t.utils.isString(e)&&!document.querySelector(e))return console.log("Selected element doesn't exists: "+e),null;const i=this.extDom(e);if(void 0===s)return i;if(s=this.plainToObject(i,s),Object.keys(s).filter((e=>!["tagName"].includes(e))).forEach((e=>{let n=s[e];null==n&&(console.log("Value was not set for key: "+e+", 'empty' was used in object: "),console.log(s),console.log("In node:"),console.log(i),n="");let o=this.updateValue(i,e,n),a=t.utils.hasProp(i,e),r=!1;if(t.utils.hasAttr(i,e)||a)switch(!0){case"value"===e&&t.utils.hasProp(i,"valueAsDate")&&o instanceof Date:e="valueAsDate";case"css"===e:case typeof o==typeof i[e]:case t.utils.isString(i[e])&&t.utils.isNumeric(o):case t.utils.isFunction(o)&&t.utils.isObject(i[e]):case t.utils.isBool(o)&&t.utils.isString(i[e]):case"object"==typeof i[e]&&"INPUT"===i.tagName:r=!0}if(r){let s=!1;switch(e){case"classList":t.utils.isArray(o)?o.forEach((t=>{i[e].add(t)})):t.utils.isString(o)?i[e].add(o):s=!0;break;case"style":case"dataset":t.utils.isPlainObject(o)?Object.keys(o).forEach((t=>{i[e][t]=this.updateValue(i[e],t,o[t])})):s=!0;break;default:switch(!0){case t.utils.isBool(o):case t.utils.hasAttrOrProp(i,e):t.utils.setPropOrAttr(i,e,o);break;default:i[e]=o}}s&&(console.error("Invalid value passed to '"+e+"': "),console.log(o),console.log("Into Node:"),console.log(i))}else{const a=[];try{if("template"!==e&&!t.utils.isFunction(o)){if(e&&e.match(/^\w/)){let t=i.find("#"+e);t&&-1===a.indexOf(t)&&a.push(t),t=i.find("[name='"+e+"']"),t&&-1===a.indexOf(t)&&a.push(t);const s=Array.from(i.findAll("."+e)).filter((e=>a.indexOf(e)<0));s.length>0&&s.forEach((e=>a.push(e)))}const t=Array.from(i.findAll(e)).filter((e=>a.indexOf(e)<0));t.length>0&&t.forEach((e=>a.push(e)))}}catch(t){return console.error("Invalid selector: "+e),void console.log(t)}if(a.length>1){const t=[];a.forEach((s=>{t.push(this.render(s,e,o))})),this.linkNode(i,e,t),void 0!==o.warn&&!1===o.warn||(console.log("Multiple elements were assigned with key: ["+e+"] under node: "),console.log(i),console.log("It might be what we expect, but if it is not expected it could result on some elements mistakenly rendered. You can specify 'warn : false' under that element to hide this message."))}else if(1===a.length){const r=a[0];if(t.utils.isElement(r)){const a=this.plainToObject(r,o),l=t.utils.isPlainObject(a)&&Object.keys(a).length>=1?Object.keys(a)[0]:null;if(l&&(o=this.updateValue(r,l,n)),t.utils.isArray(o)){const t=s.template;this.doItems(r,o,t),this.linkNode(i,e,r)}else this.renderAndLink(i,r,e,o)}else console.error("BUG: It should have been a node but got: "),console.log(r),console.log("Parent node:"),console.log(i)}else if(0===a.length){"template"===e&&void 0===s.items&&(e="items",o=[]);const n=t.utils.isFunction(o);if(void 0!==o.tagName){const t=this.appendElement(i,o.tagName);this.renderAndLink(i,t,e,o)}else if(t.utils.isValidElement(e)&&!n){const t=this.appendElement(i,e);this.renderAndLink(i,t,e,o)}else if("items"===e){const e=s.template;if(t.utils.isPlainObject(o)){const e=[];Object.keys(o).forEach((s=>{let n;"DL"===i.tagName?n={dt:s,dd:o[s]}:(n={text:o[s]},t.utils.hasAttrOrProp(i,"value")?n.value=s:n.dataset={id:s}),e.push(n)})),o=e}t.utils.isArray(o)?this.doItems(i,o,e):(console.log("Warning: 'items' specified but value is not and array, in element: "),console.log(i),console.log("Passed values are: "),console.log(o))}else n?(t.updates&&"onupdate"===e&&i.addEventListener("update",o,!0),i[e]=o):"template"!==e&&"warn"!==e&&!1!==o&&(void 0!==s.warn&&!1===s.warn||(console.error("Not sure what you want to do with key: "+e+" under element: "),console.log(i),console.log("And object:"),console.log(s),console.log("Most likely the element's property or child no longer exists or the value passed to it is incorrect."),console.log("You can set 'warn : false' property to the element to dismiss this message.")),i[e]=o)}}})),i.onload){const e=["BODY","FRAME","IFRAME","IMG","LINK","SCRIPT","STYLE"].indexOf(i.tagName)>=0,t="INPUT"===i.tagName&&"image"===i.type;e||t||i.dispatchEvent(new CustomEvent("load"))}return i}isUpdateLink(e){let s=!1;if(t.utils.isArray(e)&&(2===e.length||3===e.length)){const i=2===e.length,n=t.utils.isNode(e[0])||e[0]instanceof DOMStringMap||e[0]instanceof CSSStyleDeclaration,o=i?t.utils.isString(e[1]):t.utils.isString(e[1])&&t.utils.isFunction(e[2]);s=n&&o,s&&i&&e.push((e=>e))}return s}plainToObject(e,s){if(!t.utils.isPlainObject(s)&&!t.utils.isFunction(s)&&!t.utils.isElement(s))if(t.utils.isHtml(s))s={html:s};else if(this.isUpdateLink(s)){const i=s[0],n=s[1],o=s[2];let a=this.plainToObject(e,o(i[n]));if(t.utils.isPlainObject(a)){const e={};Object.keys(a).forEach((t=>{e[t]=s})),s=e}}else t.utils.isArray(s)?s={items:s}:t.utils.hasAttrOrProp(e,"value")?s="SELECT"===e.tagName?{value:s,text:s}:"BUTTON"===e.tagName?{text:s}:{value:s}:t.utils.isString(s)&&"IMG"===e.tagName?s={src:s}:(t.utils.isString(s)||t.utils.isNumeric(s))&&(s={text:s});return s}renderAndLink(e,t,s,i){const n=this.render(t,s,i);this.linkNode(e,s,n)}render(e,t,s){return s=this.plainToObject(e,s),this.doDom(e,s)}linkNode(e,s,i){if(e[s]===i){const t=this.proxy(i);try{e[s]=t}catch(e){}e["$"+s]=t}else t.utils.hasAttrOrProp(e,s)?(e["$"+s]=i,console.log("Property : "+s+" existed in node: "+e.tagName+". Using $"+s+" instead for node: "+i.tagName+".")):e[s]=this.proxy(i)}appendElement(e,s){const i=t.utils.newElement(s);return e.append(i),i}getItem(e,t,s,i){i||(i=this.getTemplate(e));const n=i.cloneNode(!0);this.addTemplatesToItem(i,n),n.dataset.id=t,this.setUniqueAttrib(n,"selected");let o=this.doDom(n,s);return this.getItemWithEvents(e,o)}addTemplatesToItem(e,t){["_template","__template"].forEach((s=>{void 0!==e[s]&&(t[s]=e[s])}))}getItemWithEvents(e,s){if(void 0!==e.__template){const i=(e,s)=>(s=s||{},Object.keys(e).forEach((n=>{t.utils.isPlainObject(e[n])?s[n]=i(e[n]):t.utils.isFunction(e[n])&&(s[n]=e[n])})),s);let n=i(e.__template);t.utils.isEmpty(n)||(n=n[Object.keys(n)[0]],s=this.doDom(s,n))}return s}doItems(e,t,s){const i=this.getTemplate(e,s);if(void 0===i)return console.error("Template not found. Probably an array is being used where it is not expected. Node:"),console.log(e),console.log("Value (mistaken?):"),void console.log(t);let n=0;t.forEach((t=>{t=this.plainToObject(e,t);const s=this.getItem(e,n++,t,i);s&&e.append(s)}));const o=e.find("template");o&&e.removeChild(o),e.items=e.children,this.extendItems(e)}getTemplate(e,s){if(void 0!==e._template&&""!==e._template)return e._template;{let i;const n=e.querySelector("template");if(n)i=t.utils.htmlElement(n.innerHTML.trim());else switch(e.tagName){case"SELECT":case"DATALIST":i=t.utils.newElement("option");break;case"UL":case"OL":i=t.utils.newElement("li");break;case"NAV":i=t.utils.newElement("a");break;case"DL":i=t.utils.newElement("dd");break;default:if(s){const n=Object.keys(s).length;if(n){if(n>1)if(void 0!==s.tagName){let e={};e[s.tagName]=s,s=e}else console.log("Template has more than one top elements. Using the first one. In: "),console.log(s),console.log("Node: "),console.log(e);const o=Object.keys(s)[0],a=s[o];t.utils.isValidElement(o)?i=t.utils.newElement(o):void 0!==a.tagName?(i=t.utils.newElement(a.tagName),s[a.tagName]=a,delete s[o]):(console.error("Template defined an element which can not be identified: ["+o+"], using <span> in:"),console.log(s),console.log("Node: "),console.log(e),i=t.utils.newElement("span"))}else console.error("Template has no definition, and it can not be guessed. Using <span>. Template: "),console.log(s),console.log("Node: "),console.log(e),i=t.utils.newElement("span")}else e.childElementCount>0&&(i=t.utils.htmlElement(e.innerHTML.trim()))}if(s)if(t.utils.isPlainObject(s)){const n=t.utils.newEmptyNode();n.append(i),i=this.doDom(n,s).children[0],t.utils.defineProp(e,"__template",s)}else i=t.utils.isHtml(s)?t.utils.htmlElement(s):t.utils.isSelectorID(s)?t.utils.htmlElement(document.querySelector(s).innerHTML):t.utils.newElement(s);if(i.childrenElementCount>1){console.log("Templates only supports a single child. Multiple children were detected, wrapping them with <span>. Template:"),console.log(i);const e=t.utils.newElement("span");e.append(i),i=e}return i&&t.utils.defineProp(e,"_template",i),i}}setUniqueAttrib(e,s){e.hasOwnProperty(s)||Object.defineProperty(e,s,{get:function(){return this.hasAttribute(s)},set:function(e){const i=this.parentNode?this.parentNode.find("["+s+"]"):null;i&&i.removeAttribute(s),t.utils.setAttr(this,s,e)}})}updateValue(e,s,i){if(this.isUpdateLink(i)){const n=this,o=i[0],a=i[1],r=i[2];if(i=o[a],o instanceof CSSStyleDeclaration&&this._stored.styles.includes(o)){const i=this._stored.styleNodes[this._stored.styles.indexOf(o)];t.updates&&(i.onupdate=function(t){t.detail&&"style"===t.detail.property&&t.detail.newValue.startsWith(a+":")&&n.setShortValue(e,s,r(this.style[a]))})}else if(o instanceof DOMStringMap&&this._stored.datasets.includes(o)){const i=this._stored.datasetNodes[this._stored.datasets.indexOf(o)];t.updates&&(i.onupdate=t=>{t.detail&&t.detail.property==="data-"+a&&n.setShortValue(e,s,r(t.detail.newValue))})}else t.updates&&(o.onupdate=i=>{i.detail&&i.detail.property===a&&(t.utils.isObject(e[s])||n.setShortValue(e,s,r(i.detail.newValue)))})}return i}setShortValue(e,s,i){if(t.utils.isNode(e[s]))if(t.short){const n=this.plainToObject(e[s],i),o=t.utils.isPlainObject(n)&&Object.keys(n).length>=1?Object.keys(n)[0]:null;o&&(e[s][o]=i)}else console.log("Short is disabled. Trying to set a value ("+i+") in a node:"),console.log(e[s]),console.log("Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'");else e[s]=i}getShortValue(e,s,i){let n=null;if(t.utils.isNode(e[s]))if(t.short){const o=this.plainToObject(e[s],i||""),a=t.utils.isPlainObject(o)&&Object.keys(o).length>=1?Object.keys(o)[0]:null;a&&(n=e[s][a])}else console.log("Short is disabled. Trying to get a value from node:"),console.log(e[s]),console.log("Either turn on 'short' functionality, or be sure you specify the property, like: 'node.text'");else n=e[s];return n}proxy(e,s){return!t.short||null===e||void 0!==e._proxy&&void 0===s?e:(e._proxy=e,new Proxy(e,{get:(e,s)=>{const i=e[s];switch(!0){case null==i:return null;case t.utils.isFunction(i):return i.bind(e);case i._proxy&&void 0!==e["$"+s]:return e["$"+s];case void 0===i._proxy&&t.utils.isElement(i):return this.proxy(i);default:return i}},set:(e,s,i)=>{let n="";return t.utils.isElement(e[s])?(n=this.getShortValue(e,s,i),this.setShortValue(e,s,i)):"onupdate"===s?t.updates?t.utils.isFunction(i)?(e.addEventListener("update",i,!0),n=e[s],e[s]=i):(console.error("Value passed to 'onupdate' is incorrect, in node:"),console.log(e),console.log("Value: (not a function)"),console.log(i)):(console.log("Updates are not available when `m2d2.updates == false`:"),console.log(e)):"items"===s?(e.items.clear(),this.doItems(e,i)):(n=e[s],i=this.updateValue(e,s,i),e[s]=i),t.updates&&void 0!==e.onupdate&&i!==n&&e.dispatchEvent(new CustomEvent("update",{detail:{type:typeof i,property:s,newValue:i,oldValue:n}})),!0}}))}onObserve(e,s){e.forEach((e=>{const s=e.target;if(!(this._stored.events.indexOf(e)>=0)&&(this._stored.events.push(e),setTimeout((()=>{const t=this._stored.events.indexOf(e);t>=0&&this._stored.events.splice(t,1)}),t.storedEventsTimeout),void 0!==s.onupdate))if("attributes"===e.type){const i=t.utils.getAttrOrProp(s,e.attributeName);i!==e.oldValue&&s.dispatchEvent(new CustomEvent("update",{detail:{type:typeof i,property:e.attributeName,newValue:i,oldValue:e.oldValue}}))}else if("childList"===e.type)if("#text"===(e.addedNodes[0]||e.removedNodes[0]).nodeName){const t=e.addedNodes[0].textContent,i=e.removedNodes.length?e.removedNodes[0].textContent:null;t!==i&&s.dispatchEvent(new CustomEvent("update",{detail:{type:typeof t,property:"text",newValue:t,oldValue:i}}))}else if(void 0!==s.items){const t=e.addedNodes,i=e.removedNodes;t!==i&&s.dispatchEvent(new CustomEvent("update",{detail:{type:typeof t,property:"items",newValue:t,oldValue:i}}))}}))}observe(e){if(t.updates){const t=new MutationObserver(this.onObserve.bind(this)),s={attributeOldValue:!0,subtree:!0,childList:!0},i=e._proxy||e;t.observe(i,s)}}getProxyNode(e,t){const s=this.doDom(e,t);if(s)return this.observe(s),this.proxy(s)}extendItems(e){function s(t){t.forEach((t=>{const s=t.parentNode.removeChild(t);e.append(s)}))}const i=e.items;Object.getOwnPropertyNames(Array.prototype).concat(["clear","get","remove","selected","first","last","findAll"]).forEach((n=>{if(void 0===i[n]){let o=null;const a=this;switch(n){case"copyWithin":case"fill":case"splice":o=function(){console.log("Not available yet: "+n)};break;case"reverse":o=function(...e){if(this.items.length){const t=Array.from(this.items),i=t[n](...e);return s(t),i}};break;case"clear":o=function(){for(;this.items[0];)this.items[0].remove()};break;case"get":o=function(e){let s=null;return this.items.length&&this.items.some((i=>{const n=t.utils.isNumeric(e)?1*i.dataset.id==1*e:i.dataset.id===e;if(i.dataset&&n)return s=i,!0})),s};break;case"selected":o=function(){return a.proxy(this.find(":scope > [selected]"))};break;case"first":o=function(){return a.proxy(this.items[0])};break;case"last":o=function(){return a.proxy(this.items[this.items.length-1])};break;case"pop":o=function(){if(this.items.length){const e=this[0].parentNode;return a.proxy(e.removeChild(this.items[this.items.length-1]))}};break;case"push":o=function(e){if(e=a.plainToObject(this,e),t.utils.isElement(e))this.append(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=a.getItem(this,t,e);this.appendChild(s)}else console.log("Trying to push an unknown value into a list:"),console.log(e)};break;case"remove":o=function(e){if(this.items.length){const t=this.items.get(e);1===t.length&&t.remove()}};break;case"shift":o=function(){if(this.items.length){const e=this.items[0].parentNode;return a.proxy(e.removeChild(this.items[0]))}};break;case"sort":o=function(e){if(this.items.length){const t=Array.from(this.items);t.sort(e||((e,t)=>e.text.localeCompare(t.text))),s(t)}};break;case"unshift":o=function(e){if(e=a.plainToObject(this,e),t.utils.isElement(e))this.prepend(e);else if(t.utils.isPlainObject(e)){const t=this.items.length,s=a.getItem(this,t,e);this.prepend(s)}else console.log("Trying to unshift an unknown value into a list:"),console.log(e)};break;default:let i=n;switch(!0){case"findAll"===n:i="filter";case t.utils.isFunction(Array.prototype[n]):const s=function(...t){const s=[];return Array.from(e.items).forEach((e=>{s.push(a.proxy(e))})),Array.from(s)[i](...t)};switch(n){case"find":o=function(...e){return t.utils.isString(e[0])?this.find(e[0]):s(...e)};break;case"findAll":o=function(...e){return 0===e.length?this.findAll():t.utils.isString(e[0])?this.findAll(e[0]):s(...e)};break;case"concat":o=function(...e){for(let s=0;s<e.length;s++)if(t.utils.isArray(e[s]))for(let i=0;i<e[s].length;i++){let n=e[s][i];if(!t.utils.isElement(n)&&(n=a.plainToObject(this,e[s][i]),t.utils.isPlainObject(n))){const e=this.items.length;n=a.getItem(this,e,n)}this.items.push(n)}};break;default:o=s}}}o&&t.utils.defineProp(i,n,o.bind(e))}}))}}return t}));class NdJsonPlayer{loop;autoplay;playing=!1;loaded=!1;started=!1;onStart;onLoad;onRender;onPlay;onStop;onFinish;onError;wrapper=null;canvas=null;ctx=null;timer=null;src="";frame=0;multiplier=1;_frames=[];_renderItems=[];_aspectRatio=0;_general={numFrames:0,totTime:0,frameBase:"",thumbBase:"",startTimeStamp:0,keepAspectRatio:!0,framesPerSec:24,fontFamily:"",fontSize:20,fontColor:"yellow",totalTime:"00:01:00",scale:1e3,zIndex:0};constructor(e,t,s,i){const n=this;n.src=e,window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame);const o=()=>{};i=Object.assign({},i),n.onStart=i.onstart||o,n.onLoad=i.onload||o,n.onRender=i.onrender||o,n.onPlay=i.onplay||o,n.onStop=i.onstop||o,n.onFinish=i.onfinish||o,n.onError=i.onerror||(e=>{console.log(e)});let a=null;if(t instanceof Node)a=t;else{if("object"==typeof t)s=t,t="canvas";else if("string"!=typeof t)throw"Incorrect parameter passed to constructor of NdJsonPlayer";a=document.querySelector(t||"canvas")}if(!a)throw"Canvas element was not found in DOM: "+t;{let e=null;if("CANVAS"===a.tagName){e=a;const t=document.createElement("div");a.parentNode.insertBefore(t,a),t.prepend(a),a=t}else if(a.hasChildNodes()){if(e=a.querySelector("canvas"),!e)throw"No canvas found in element"}else e=document.createElement("CANVAS"),a.prepend(e);n.canvas="OffscreenCanvas"in window?e.transferControlToOffscreen():e}n.wrapper=a,n.canvas.width=n.wrapper.parent().clientWidth,n.canvas.height=n.wrapper.parent().clientHeight,n._aspectRatio=n.canvas.height/n.canvas.width,a.classList.add("ndjp"),n.ctx=n.canvas.getContext("2d"),n.fps=s.fps||24,n.loop=s.loop||!1,n.autoplay=s.autoplay||!1,n.showfirst=!1!==s.showfirst,n.path=s.path||"","auto"===s.width&&(s.width=0),"auto"===s.height&&(s.height=0),n.timer=new TimerSrc(1e3/n.fps),n.src&&n.autoplay?n.load():console.log("Initializing without source...")}_reset(){this._frames=[],this.loaded=!1}load(e,t){const s=this;void 0!==t&&(this.src=t,this._reset());let i=!0;!async function(e,t){const s=(await fetch(e)).body.getReader(),i=new TextDecoder;let n="",o=!1;for(;!o;){const{value:e,done:a}=await s.read();let r;for(o=a,n+=i.decode(e,{stream:!0});-1!==(r=n.indexOf("\n"));){t(n.slice(0,r)),n=n.slice(r+1)}}}(this.src,(e=>{i||s.autoplay?(s.processFrame(JSON.parse(e),!0),i=!1):s.append(JSON.parse(e))}))}reload(e,t){const s=this,i=[];switch(s._reset(),!0){case"string"==typeof e:i=e.split(/[\r\n](?=.)/.map(JSON.parse));break;case Array.isArray(e):i=e;break;case"Object"===e.constructor.name:i.push(e);break;default:return void console.log("Unable to reload frames. ")}i.forEach((e=>{s.processFrame(e),t&&t(e)}))}append(e){this._frames.push(e)}prepend(e){this._frames.unshift(e),this.frame++}processFrame(e,t){const s=this,i=s.canvas,n=s.ctx;switch(e.i){case"g":void 0!==e.lp&&(s.loop=!0),void 0!==e.w&&(s.canvas.width=e.w,null==e.sc&&(s._general.scale=e.w),s._aspectRatio=s.canvas.height/s.canvas.width),void 0!==e.h&&(s.canvas.height=e.h,s._aspectRatio=s.canvas.height/s.canvas.width),void 0!==e.kar&&(s._general.keepAspectRatio=e.kar),void 0!==e.sc&&(s._general.scale=e.sc),void 0!==e.fps&&(s._general.framesPerSec=e.fps),void 0!==e.fb&&(s._general.frameBase=e.fb),void 0!==e.thb&&(s._general.thumbBase=e.thb),void 0!==e.tf&&(s._general.numFrames=e.tf),void 0!==e.tt&&(s._general.totTime=e.tt),void 0!==e.ts&&(s._general.startTimeStamp||(s._general.startTimeStamp=e.ts)),void 0!==e.fs&&(s._general.fontSize=e.fs),void 0!==e.fc&&(s._general.fontColor=e.fc),void 0!==e.ff&&(s._general.fontFamily=e.ff);break;case"c":void 0!==e.f||console.log("Circle object didn't specify what?: "+e);break;case"q":case"a":break;case"t":if(void 0!==e.f){const o=i.width/(e.sc||s._general.scale);n.font=(e.fs||s._general.fontSize)*o+"px "+(e.ff||s._general.fontFamily),n.fillStyle=e.fc||s._general.fontColor,n.fillText(e.f,e.x*o||0,e.y*o||0),t&&-1==s._renderItems.indexOf(e.f)&&s._renderItems.push(e)}else console.log("Text object didn't specify content: "+e);break;case"p":if(void 0!==e.f){const o=!!e.tl,a=!!e.fh,r=!!e.fv,l=i.width,c=new Image;c.src=e.f,c.onload=()=>{e.a?function(t,i){const c=l/(e.sc||s._general.scale),d=(1*e.w||t.width)*c,u=(1*e.h||t.height)*c,h=Math.round(d/2),p=Math.round(u/2),m=document.createElement("canvas"),f=m.getContext("2d"),g=1.45*Math.max(d,u),y=Math.round((g-d)/2),v=Math.round((g-u)/2);m.width=g,m.height=g;const b=Math.round(g/2),w=i*Math.PI/180;f.translate(b,b),f.rotate(w),a&&f.scale(-1,1),r&&f.scale(1,-1),f.drawImage(t,-h,-p,d,u);const x=e.x*c-(o?y:b),N=e.y*c-(o?v:b);n.drawImage(m,x,N,g,g)}(c,1*e.a):n.drawImage(c,1*e.x,1*e.y,1*e.w,1*e.h),t&&-1==s._renderItems.indexOf(e.f)&&s._renderItems.push(e)}}else console.log("Picture object didn't specify source: "+e);break;case"f":void 0!==e.f?(s._frames.push(e),s.loaded||(s.loaded=!0,s.autoplay?s.play():s.showfirst&&s.step())):console.log("Picture object didn't specify source: "+e);break;case"v":if(void 0!==e.f){const t=document.createElement("video"),o=document.createElement("source");void 0!==e.w&&(t.width=1*e.w),void 0!==e.h&&(t.height=1*e.h),t.muted=!0,t.appendChild(o),o.src=e.f,t.addEventListener("play",(function(){const e=this;let t=0;const o=1e3/s._general.framesPerSec;!function a(){if(!e.paused&&!e.ended){t+=o;const r=i.width/e.videoWidth,l=i.height/e.videoHeight,c=Math.min(r,l),d=(i.width-e.videoWidth*c)/2,u=(i.height-e.videoHeight*c)/2;s._general.keepAspectRatio&&(i.height=i.width*s._aspectRatio),n.clearRect(0,0,i.width,i.height),n.drawImage(e,0,0,e.videoWidth,e.videoHeight,d,u,e.videoWidth*c,e.videoHeight*c),n.font="15px Arial",n.fillStyle="white",n.fillText(Math.round(t),50,50),s._renderItems.length&&s._renderItems.forEach((e=>{if(e.t){const i=s._timeToMilliSeconds(e.t),n=e.tt?i+s._timeToMilliSeconds(e.tt):s._general.totTime||9999999999999;t>=i&&t<=n&&s.processFrame(e,!1)}else s.processFrame(e,!1)})),setTimeout(a,o)}}()}),0),t.play(),s.loop&&(t.onended=()=>t.play())}else console.log("Video object didn't specify source: "+e);break;case"d":s.onRender(e)}s.started||(s.onStart(s),s.started=!0)}_render(e){if(null==this.timer)throw"TimerSrc was not initialized";if(0===this._frames.length)throw"Video is empty or no frames were found";this.frame>=this._frames.length-1&&(this.frame=this.loop?0:this._frames.length-1),this.frame<0&&(this.frame=this.loop?this._frames.length-1:0),this._displayImg(e)}_displayImg(e){const t=this;let s=t._frames[t.frame];if(s){const i=function(){t.onRender(s),t.timer.call((function(){t._increment(),e||t.timer.nocall(),t._displayImg()}))};if(void 0!==s.f){const e=t._general.frameBase+s.f;t._image(e,i)}else i()}}_increment(){this.frame+=1*this.multiplier,this.frame<0&&(this.loop?this.frame=this._frames.length-1:(this.frame=0,this.pause(),this.onFinish(this))),this.frame>this.totalFrames()-1&&(this.loop?this.frame=0:(this.frame=this._frames.length-1,this.pause(),this.onFinish(this)))}_draw=function(e,t){const s=this;return 0===e.width&&0===e.height?(e.onerror(),void 0!==t&&t(!1)):(s.ctx.clearRect(0,0,s.canvas.width,s.canvas.height),s.ctx.drawImage(e,0,0,e.width,e.height,0,0,s.canvas.width,s.canvas.height),void 0!==t&&t(!0)),this};_image=function(e,t){const s=this,i=new Image;return i.crossOrigin="",i.onload=function(){s._draw(i,(function(e){e&&void 0!==t&&t(i)}))},i.onerror=function(){const e=s.onError();e&&(i.src=e)},i.src="/"===e[0]||e.match(/^https?:/)||e.match(/^data:image/)?e:s.path+e,this};_timeToMilliSeconds(e){let t=0;return-1!==e.indexOf(".")&&(t=1*e.split(".")[1],e=e.split(".")[0]),1e3*(-1!==e.indexOf(":")?e.split(":").reduce(((e,t,s)=>e+t*Math.pow(60,2-s)),0):0)+t}frameBase(){return this._general.frameBase}thumbBase(){return this._general.thumbBase}currentFrame(){return this.frame}totalFrames(){return this._numFrames||this._frames.length}totalTime(){return this._totTime||this.currentFrame()/this.fps}frameAt(e){const t=this;let s=e<this.totalFrames()?t._frames[e]:null;return s&&(s.fb=t._general.frameBase),s}indexAt(e){return~~(e*this.totalFrames()/100)}playerNode(){return this.wrapper}play(e){e<0?e=0:e>this._frames.length?e=this._frames.length-1:void 0!==e&&(this.frame=1*e),this.playing=!0,this.timer.play(),this._render(!1),this.onPlay(this)}playForward(e){this.play(e)}pause(){this.playing=!1,this.timer.pause(),this.onStop(this)}stop(){this.playing=!1,this.frame=0,this.timer.pause(),this._displayImg(!0),this.onStop(this)}step(){this.onPlay(this),this.playing=!1,this.timer.step(),this._render(!0),this.onStop(this)}jumpTo(e){e<0?e=0:e>this._frames.length?e=this._frames.length-1:void 0!==e&&(this.frame=1*e),this._render(!0)}stepForwards(){this.step()}reset(){return void 0!==this.ctx.reset&&(this.ctx.reset(),this.ctx.clear(),this.stop(),this.canvas.width=this.canvas.width),this}}class NDJPlayer{player;options;ui;constructor(e,t,s){const i=this;function n(e){return e.indexOf(".")>0||-1!==e.indexOf("/")}function o(e){return"."===e[0]||"#"===e[0]||null!==document.querySelector(e)}switch(arguments.length){case 2:"Object"===arguments[1].constructor.name&&(s=arguments[1],n(arguments[0])?t=null:(arguments[0]instanceof HTMLElement||o(arguments[0]))&&(t=arguments[0],e=null));break;case 1:switch(!0){case"Object"===arguments[0].constructor.name:s=arguments[0],e=null,t=null;break;case n(arguments[0]):e=arguments[0],t=null,s={};break;case arguments[0]instanceof HTMLElement||o(arguments[0]):t=arguments[0],e=null,s={};break;default:console.log("Unknown parameter was passed to NDJPlayer constructor."),e=null,t=null,s={}}break;case 0:s={}}i.options=Object.assign({controls:!1,resize:!0,onaction:(e,t,s)=>{},onplay:e=>{},onstop:e=>{}},s||{}),this._create(t),this.player=new NdJsonPlayer(e,t,i.options,{onstart:function(e){i._adjustSize(),void 0!==i.options.onstart&&i.options.onstart(e)},onload:function(e){void 0!==i.options.onload&&i.options.onload(e)},onrender:function(e){i._onUpdate(e),void 0!==i.options.onrender&&i.options.onrender(e)},onplay:function(e){i.ui.panel&&(i.ui.play.show=!1,i.ui.step.css.contains("disabled")||(i.ui.step.show=!1),i.ui.pause.show=!0),i.options.onplay(e)},onstop:function(e){i.ui.panel&&(i.ui.play.show=!0,i.ui.step.css.contains("disabled")||(i.ui.step.show=!0),i.ui.pause.show=!1),i.options.onstop(e)},onfinish:function(e){},onerror:function(e){console.log(e)}}),window.addEventListener("resize",(function(e){i._adjustSize()}),!0)}_onUpdate(e){const t=this;if(t.ui){if(t.ui.frames&&(t.ui.frames.text=t.player.currentFrame()+1+"/"+t.player.totalFrames()),t.ui.lapse){let s="";const i=t.player._startTimeStamp&&void 0!==e.ts,n=void 0!==e.t,o=t.player._totTime>0;e.d&&(s=e.d+" "),i?s+=t._formatMillis(e.ts-t.player._startTimeStamp):n&&(s+=e.t.indexOf(":")>0?e.t:t._fmtTime(e.t)),o&&(s+="/"+t.player.totalTime()),t.ui.lapse.text=s}t.ui.progress&&t.player.totalFrames()&&(t.ui.progress.value=Math.round((t.player.currentFrame()+1)/t.player.totalFrames()*100))}}_adjustSize(){if(this.options.resize){let e=this.player.wrapper,t=e.parent(),s=(this.options.height||this.player.canvas.height)/(this.options.width||this.player.canvas.width);this.player.canvas.height=t.clientHeight-(this.options.controls?e.querySelector(".panel").clientHeight:0),this.player.canvas.width=this.player.canvas.height/s}}_create(e){const t=this;if(m2d2){const s=m2d2.load();t.ui=s(e,t._getUI(e)),t.ui.panel&&["thumb","play","step","pause","stop","lapse","progress","frames","fullscreen"].forEach((e=>{t.ui[e]=t.ui.panel[e]}))}else console.log("M2D2 was not found. Either use the standard version (which includes M2D2) or add M2D2 in your dependencies.")}_getUI(e){const t=this;let s={html:e.innerHTML||""};if(t.options.controls&&(s=this._getBasicUI(),"full"===t.options.controls))s.panel.step.css.remove("disabled");this.options.controls;let i=e instanceof Node?e:document.querySelector(e);if(i){i.querySelector("canvas")||(s=Object.assign({canvas:""},s))}else console.log("Root element: "+e+" was not found in document"),s=Object.assign({canvas:""},s);return s}_getBasicUI(){const e=this;return document.addEventListener("fullscreenchange",(t=>{const s=e.player.wrapper;document.fullscreenElement?s.classList.add("fullscreen"):s.classList.remove("fullscreen")})),{caption:"",css:e.options.controls,panel:{tagName:"div",className:"panel",thumb:{tagName:"figure",className:"thumb",img:{src:""},caption:{tagName:"figCaption",className:"caption"}},rec:{tagName:"a",className:"rec",title:"Live",href:"#"},play:{tagName:"a",className:"play",title:"Play",href:"#",onclick:function(){return e.ui.onaction("play",e.player,e),e.player.play(),!1}},pause:{tagName:"a",className:"pause",title:"Pause",href:"#",onclick:function(){return e.ui.onaction("pause",e.player,e),e.player.pause(),!1}},step:{tagName:"a",css:["step","disabled"],title:"Step",href:"#",onclick:function(){return e.ui.onaction("step",e.player,e),e.player.step(),!1}},stop:{tagName:"a",className:"stop",title:"Stop",href:"#",onclick:function(){return e.ui.onaction("stop",e.player,e),e.player.stop(),!1}},lapse:{tagName:"label",className:"lapse",title:"Time elapsed / Time Total",text:"0:00"},live:{tagName:"label",className:"live",text:"Live Feed"},progress:{value:0,max:100,onmousemove:function(t){let s=~~(t.offsetX/this.offsetWidth*100),i=e.player.frameAt(e.player.indexAt(s));i?(e.ui.thumb.show=!0,e.ui.thumb.img.src=(e.player.thumbBase()||e.player.frameBase())+(i.th||i.f),e.ui.thumb.img.onload=function(){const t=e.ui.thumb.img.naturalWidth||e.ui.thumb.img.width;e.ui.thumb.style.width=t+"px"},void 0!==i.tc&&(e.ui.thumb.caption=i.tc),e.ui.thumb.style.left=this.offsetLeft+t.offsetX-e.ui.thumb.clientWidth/2+"px"):e.ui.thumb.show=!1},onmouseleave:function(){e.ui.thumb.show=!1},onclick:function(t){let s=~~(t.offsetX/this.offsetWidth*100),i=e.player.indexAt(s);e.player.jumpTo(i),e.ui.onaction("progress",e.player,e)}},frames:{tagName:"label",className:"frames",title:"Current Frame / Total Frames",text:"0"},fullscreen:{tagName:"a",className:"fullscreen",title:"Full Screen",href:"#",onclick:function(t){const s=e.player.wrapper;return s.classList.contains("fullscreen")?(e.ui.onaction("exit-fullscreen",e.player,e),document.exitFullscreen()):(e.ui.onaction("fullscreen",e.player,e),s.requestFullscreen()),!1}}},onaction:function(t,s,i){e.options.onaction(t,s,i)},onplay:function(t){e.options.onplay(t)},onstop:function(t){e.options.onstop(t,uiPlayer)}}}_fmtTime(e){let t=(e=e.toFixed(2)).split(".")[1]||"00";return(~~(e/60)+"").padStart(2,"0")+":"+(~~(e/60%1*60)+"").padStart(2,"0")+"."+t}_formatMillis(e){function t(e,t){return("00"+e).slice(-1*(t||2))}const s=Math.floor(e/1e3/60/60),i=Math.floor(60*(e/1e3/60/60-s)),n=Math.floor(60*(60*(e/1e3/60/60-s)-i)),o=parseInt(e%1e3/100);return t(s)+":"+t(i)+":"+t(n)+"."+t(o,3)}}function TimerSrc(e,t){let s,i,n,o,a={};a.interval=e,a.checker=50,a.status="init";let r=(new Date).getTime();return s=r-e,a.call=function(e){return t=e,a},a.nocall=function(){return t=null,a},a.exec=function(){return t&&t(),s=(new Date).getTime(),a},a.check=function(){return n&&n(),a},a.play=function(){return n=a.step,a.status="running",a},a.pause=function(){return n=null,a.status="paused",a},a.destroy=function(){for(var e in n=null,clearInterval(i),i=null,a)a[e]=null,delete a[e];a.status="destroyed"},a.step=function(){return r=(new Date).getTime(),o=Math.max(0,a.interval-(r-s)),0===o&&(o=a.interval,s=(new Date).getTime(),t&&t()),a},a.slow=function(){return a.interval=1e3,a},a.fast=function(){return a.interval=e,a},i=setInterval(a.check,a.checker),a}class VideoND extends HTMLElement{constructor(){super(),this._root=this;const e=this,t={autoplay:!1,controls:!1,loop:!1,live:!1,width:"auto",height:"auto",poster:"",preload:"auto",src:"",cc:"auto",caption:"",fullscreen:!1,fps:"",speed:!1,autosize:"auto",sizes:{}||[],thumbs:"auto"},s={};for(let e in t)s[e]=this.getAttribute(e)||this.hasAttribute(e)||t[e];s.onstart=function(t){e.onstart&&e.onstart(t)},s.onload=function(t){e.onload&&e.onload(t)},s.onrender=function(t){e.onrender&&e.onrender(t,i.wrapper,i,i.player.canvas,i.player.ctx)},this.style.display="block",this.className="ndjp";const i=new NDJPlayer(s.src,this,s)}setCaption(e){this._root.querySelector("caption").innerText=e}static get observedAttributes(){return["width","height","caption"]}attributeChangedCallback(e,t,s){"caption"===e&&this.setCaption(s)}}document.addEventListener("DOMContentLoaded",(function(){window.customElements.define("video-nd",VideoND)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=ndjson-player.min.js.map
