/**
 * Author : A.Lepe (dev@alepe.com)
 * License: MIT
 * Version: 0.1.8
 * Updated: 2024-12-10
 * Content: ndjson-player.headless.min.js (Bundle 'No M2D2 included' Minimized)
 */

class NdJsonPlayer{loop;autoplay;playing=!1;loaded=!1;started=!1;onStart;onLoad;onRender;onPlay;onStop;onFinish;onError;wrapper=null;canvas=null;ctx=null;timer=null;src="";frame=0;multiplier=1;_frames=[];_renderItems=[];_aspectRatio=0;_general={numFrames:0,totTime:0,frameBase:"",thumbBase:"",startTimeStamp:0,keepAspectRatio:!0,framesPerSec:24,fontFamily:"",fontSize:20,fontColor:"yellow",totalTime:"00:01:00",scale:1e3,zIndex:0};constructor(e,t,a,s){const n=this;n.src=e,window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame);const i=()=>{};s=Object.assign({},s),n.onStart=s.onstart||i,n.onLoad=s.onload||i,n.onRender=s.onrender||i,n.onPlay=s.onplay||i,n.onStop=s.onstop||i,n.onFinish=s.onfinish||i,n.onError=s.onerror||(e=>{console.log(e)});let o=null;if(t instanceof Node)o=t;else{if("object"==typeof t)a=t,t="canvas";else if("string"!=typeof t)throw"Incorrect parameter passed to constructor of NdJsonPlayer";o=document.querySelector(t||"canvas")}if(!o)throw"Canvas element was not found in DOM: "+t;{let e=null;if("CANVAS"===o.tagName){e=o;const t=document.createElement("div");o.parentNode.insertBefore(t,o),t.prepend(o),o=t}else if(o.hasChildNodes()){if(e=o.querySelector("canvas"),!e)throw"No canvas found in element"}else e=document.createElement("CANVAS"),o.prepend(e);n.canvas="OffscreenCanvas"in window?e.transferControlToOffscreen():e}n.wrapper=o,n.canvas.width=n.wrapper.parent().clientWidth,n.canvas.height=n.wrapper.parent().clientHeight,n._aspectRatio=n.canvas.height/n.canvas.width,o.classList.add("ndjp"),n.ctx=n.canvas.getContext("2d"),n.fps=a.fps||24,n.loop=a.loop||!1,n.autoplay=a.autoplay||!1,n.showfirst=!1!==a.showfirst,n.path=a.path||"","auto"===a.width&&(a.width=0),"auto"===a.height&&(a.height=0),n.timer=new TimerSrc(1e3/n.fps),n.src&&n.autoplay?n.load():console.log("Initializing without source...")}_reset(){this._frames=[],this.loaded=!1}load(e,t){const a=this;void 0!==t&&(this.src=t,this._reset());let s=!0;!async function(e,t){const a=(await fetch(e)).body.getReader(),s=new TextDecoder;let n="",i=!1;for(;!i;){const{value:e,done:o}=await a.read();let r;for(i=o,n+=s.decode(e,{stream:!0});-1!==(r=n.indexOf("\n"));){t(n.slice(0,r)),n=n.slice(r+1)}}}(this.src,(e=>{s||a.autoplay?(a.processFrame(JSON.parse(e),!0),s=!1):a.append(JSON.parse(e))}))}reload(e,t){const a=this,s=[];switch(a._reset(),!0){case"string"==typeof e:s=e.split(/[\r\n](?=.)/.map(JSON.parse));break;case Array.isArray(e):s=e;break;case"Object"===e.constructor.name:s.push(e);break;default:return void console.log("Unable to reload frames. ")}s.forEach((e=>{a.processFrame(e),t&&t(e)}))}append(e){this._frames.push(e)}prepend(e){this._frames.unshift(e),this.frame++}processFrame(e,t){const a=this,s=a.canvas,n=a.ctx;switch(e.i){case"g":void 0!==e.lp&&(a.loop=!0),void 0!==e.w&&(a.canvas.width=e.w,null==e.sc&&(a._general.scale=e.w),a._aspectRatio=a.canvas.height/a.canvas.width),void 0!==e.h&&(a.canvas.height=e.h,a._aspectRatio=a.canvas.height/a.canvas.width),void 0!==e.kar&&(a._general.keepAspectRatio=e.kar),void 0!==e.sc&&(a._general.scale=e.sc),void 0!==e.fps&&(a._general.framesPerSec=e.fps),void 0!==e.fb&&(a._general.frameBase=e.fb),void 0!==e.thb&&(a._general.thumbBase=e.thb),void 0!==e.tf&&(a._general.numFrames=e.tf),void 0!==e.tt&&(a._general.totTime=e.tt),void 0!==e.ts&&(a._general.startTimeStamp||(a._general.startTimeStamp=e.ts)),void 0!==e.fs&&(a._general.fontSize=e.fs),void 0!==e.fc&&(a._general.fontColor=e.fc),void 0!==e.ff&&(a._general.fontFamily=e.ff);break;case"c":void 0!==e.f||console.log("Circle object didn't specify what?: "+e);break;case"q":case"a":break;case"t":if(void 0!==e.f){const i=s.width/(e.sc||a._general.scale);n.font=(e.fs||a._general.fontSize)*i+"px "+(e.ff||a._general.fontFamily),n.fillStyle=e.fc||a._general.fontColor,n.fillText(e.f,e.x*i||0,e.y*i||0),t&&-1==a._renderItems.indexOf(e.f)&&a._renderItems.push(e)}else console.log("Text object didn't specify content: "+e);break;case"p":if(void 0!==e.f){const i=!!e.tl,o=!!e.fh,r=!!e.fv,l=s.width,c=new Image;c.src=e.f,c.onload=()=>{e.a?function(t,s){const c=l/(e.sc||a._general.scale),h=(1*e.w||t.width)*c,u=(1*e.h||t.height)*c,p=Math.round(h/2),d=Math.round(u/2),f=document.createElement("canvas"),m=f.getContext("2d"),g=1.45*Math.max(h,u),y=Math.round((g-h)/2),w=Math.round((g-u)/2);f.width=g,f.height=g;const v=Math.round(g/2),_=s*Math.PI/180;m.translate(v,v),m.rotate(_),o&&m.scale(-1,1),r&&m.scale(1,-1),m.drawImage(t,-p,-d,h,u);const b=e.x*c-(i?y:v),x=e.y*c-(i?w:v);n.drawImage(f,b,x,g,g)}(c,1*e.a):n.drawImage(c,1*e.x,1*e.y,1*e.w,1*e.h),t&&-1==a._renderItems.indexOf(e.f)&&a._renderItems.push(e)}}else console.log("Picture object didn't specify source: "+e);break;case"f":void 0!==e.f?(a._frames.push(e),a.loaded||(a.loaded=!0,a.autoplay?a.play():a.showfirst&&a.step())):console.log("Picture object didn't specify source: "+e);break;case"v":if(void 0!==e.f){const t=document.createElement("video"),i=document.createElement("source");void 0!==e.w&&(t.width=1*e.w),void 0!==e.h&&(t.height=1*e.h),t.muted=!0,t.appendChild(i),i.src=e.f,t.addEventListener("play",(function(){const e=this;let t=0;const i=1e3/a._general.framesPerSec;!function o(){if(!e.paused&&!e.ended){t+=i;const r=s.width/e.videoWidth,l=s.height/e.videoHeight,c=Math.min(r,l),h=(s.width-e.videoWidth*c)/2,u=(s.height-e.videoHeight*c)/2;a._general.keepAspectRatio&&(s.height=s.width*a._aspectRatio),n.clearRect(0,0,s.width,s.height),n.drawImage(e,0,0,e.videoWidth,e.videoHeight,h,u,e.videoWidth*c,e.videoHeight*c),n.font="15px Arial",n.fillStyle="white",n.fillText(Math.round(t),50,50),a._renderItems.length&&a._renderItems.forEach((e=>{if(e.t){const s=a._timeToMilliSeconds(e.t),n=e.tt?s+a._timeToMilliSeconds(e.tt):a._general.totTime||9999999999999;t>=s&&t<=n&&a.processFrame(e,!1)}else a.processFrame(e,!1)})),setTimeout(o,i)}}()}),0),t.play(),a.loop&&(t.onended=()=>t.play())}else console.log("Video object didn't specify source: "+e);break;case"d":a.onRender(e)}a.started||(a.onStart(a),a.started=!0)}_render(e){if(null==this.timer)throw"TimerSrc was not initialized";if(0===this._frames.length)throw"Video is empty or no frames were found";this.frame>=this._frames.length-1&&(this.frame=this.loop?0:this._frames.length-1),this.frame<0&&(this.frame=this.loop?this._frames.length-1:0),this._displayImg(e)}_displayImg(e){const t=this;let a=t._frames[t.frame];if(a){const s=function(){t.onRender(a),t.timer.call((function(){t._increment(),e||t.timer.nocall(),t._displayImg()}))};if(void 0!==a.f){const e=t._general.frameBase+a.f;t._image(e,s)}else s()}}_increment(){this.frame+=1*this.multiplier,this.frame<0&&(this.loop?this.frame=this._frames.length-1:(this.frame=0,this.pause(),this.onFinish(this))),this.frame>this.totalFrames()-1&&(this.loop?this.frame=0:(this.frame=this._frames.length-1,this.pause(),this.onFinish(this)))}_draw=function(e,t){const a=this;return 0===e.width&&0===e.height?(e.onerror(),void 0!==t&&t(!1)):(a.ctx.clearRect(0,0,a.canvas.width,a.canvas.height),a.ctx.drawImage(e,0,0,e.width,e.height,0,0,a.canvas.width,a.canvas.height),void 0!==t&&t(!0)),this};_image=function(e,t){const a=this,s=new Image;return s.crossOrigin="",s.onload=function(){a._draw(s,(function(e){e&&void 0!==t&&t(s)}))},s.onerror=function(){const e=a.onError();e&&(s.src=e)},s.src="/"===e[0]||e.match(/^https?:/)||e.match(/^data:image/)?e:a.path+e,this};_timeToMilliSeconds(e){let t=0;return-1!==e.indexOf(".")&&(t=1*e.split(".")[1],e=e.split(".")[0]),1e3*(-1!==e.indexOf(":")?e.split(":").reduce(((e,t,a)=>e+t*Math.pow(60,2-a)),0):0)+t}frameBase(){return this._general.frameBase}thumbBase(){return this._general.thumbBase}currentFrame(){return this.frame}totalFrames(){return this._numFrames||this._frames.length}totalTime(){return this._totTime||this.currentFrame()/this.fps}frameAt(e){const t=this;let a=e<this.totalFrames()?t._frames[e]:null;return a&&(a.fb=t._general.frameBase),a}indexAt(e){return~~(e*this.totalFrames()/100)}playerNode(){return this.wrapper}play(e){e<0?e=0:e>this._frames.length?e=this._frames.length-1:void 0!==e&&(this.frame=1*e),this.playing=!0,this.timer.play(),this._render(!1),this.onPlay(this)}playForward(e){this.play(e)}pause(){this.playing=!1,this.timer.pause(),this.onStop(this)}stop(){this.playing=!1,this.frame=0,this.timer.pause(),this._displayImg(!0),this.onStop(this)}step(){this.onPlay(this),this.playing=!1,this.timer.step(),this._render(!0),this.onStop(this)}jumpTo(e){e<0?e=0:e>this._frames.length?e=this._frames.length-1:void 0!==e&&(this.frame=1*e),this._render(!0)}stepForwards(){this.step()}reset(){return void 0!==this.ctx.reset&&(this.ctx.reset(),this.ctx.clear(),this.stop(),this.canvas.width=this.canvas.width),this}}class NDJPlayer{player;options;ui;constructor(e,t,a){const s=this;function n(e){return e.indexOf(".")>0||-1!==e.indexOf("/")}function i(e){return"."===e[0]||"#"===e[0]||null!==document.querySelector(e)}switch(arguments.length){case 2:"Object"===arguments[1].constructor.name&&(a=arguments[1],n(arguments[0])?t=null:(arguments[0]instanceof HTMLElement||i(arguments[0]))&&(t=arguments[0],e=null));break;case 1:switch(!0){case"Object"===arguments[0].constructor.name:a=arguments[0],e=null,t=null;break;case n(arguments[0]):e=arguments[0],t=null,a={};break;case arguments[0]instanceof HTMLElement||i(arguments[0]):t=arguments[0],e=null,a={};break;default:console.log("Unknown parameter was passed to NDJPlayer constructor."),e=null,t=null,a={}}break;case 0:a={}}s.options=Object.assign({controls:!1,resize:!0,onaction:(e,t,a)=>{},onplay:e=>{},onstop:e=>{}},a||{}),this._create(t),this.player=new NdJsonPlayer(e,t,s.options,{onstart:function(e){s._adjustSize(),void 0!==s.options.onstart&&s.options.onstart(e)},onload:function(e){void 0!==s.options.onload&&s.options.onload(e)},onrender:function(e){s._onUpdate(e),void 0!==s.options.onrender&&s.options.onrender(e)},onplay:function(e){s.ui.panel&&(s.ui.play.show=!1,s.ui.step.css.contains("disabled")||(s.ui.step.show=!1),s.ui.pause.show=!0),s.options.onplay(e)},onstop:function(e){s.ui.panel&&(s.ui.play.show=!0,s.ui.step.css.contains("disabled")||(s.ui.step.show=!0),s.ui.pause.show=!1),s.options.onstop(e)},onfinish:function(e){},onerror:function(e){console.log(e)}}),window.addEventListener("resize",(function(e){s._adjustSize()}),!0)}_onUpdate(e){const t=this;if(t.ui){if(t.ui.frames&&(t.ui.frames.text=t.player.currentFrame()+1+"/"+t.player.totalFrames()),t.ui.lapse){let a="";const s=t.player._startTimeStamp&&void 0!==e.ts,n=void 0!==e.t,i=t.player._totTime>0;e.d&&(a=e.d+" "),s?a+=t._formatMillis(e.ts-t.player._startTimeStamp):n&&(a+=e.t.indexOf(":")>0?e.t:t._fmtTime(e.t)),i&&(a+="/"+t.player.totalTime()),t.ui.lapse.text=a}t.ui.progress&&t.player.totalFrames()&&(t.ui.progress.value=Math.round((t.player.currentFrame()+1)/t.player.totalFrames()*100))}}_adjustSize(){if(this.options.resize){let e=this.player.wrapper,t=e.parent(),a=(this.options.height||this.player.canvas.height)/(this.options.width||this.player.canvas.width);this.player.canvas.height=t.clientHeight-(this.options.controls?e.querySelector(".panel").clientHeight:0),this.player.canvas.width=this.player.canvas.height/a}}_create(e){const t=this;if(m2d2){const a=m2d2.load();t.ui=a(e,t._getUI(e)),t.ui.panel&&["thumb","play","step","pause","stop","lapse","progress","frames","fullscreen"].forEach((e=>{t.ui[e]=t.ui.panel[e]}))}else console.log("M2D2 was not found. Either use the standard version (which includes M2D2) or add M2D2 in your dependencies.")}_getUI(e){const t=this;let a={html:e.innerHTML||""};if(t.options.controls&&(a=this._getBasicUI(),"full"===t.options.controls))a.panel.step.css.remove("disabled");this.options.controls;let s=e instanceof Node?e:document.querySelector(e);if(s){s.querySelector("canvas")||(a=Object.assign({canvas:""},a))}else console.log("Root element: "+e+" was not found in document"),a=Object.assign({canvas:""},a);return a}_getBasicUI(){const e=this;return document.addEventListener("fullscreenchange",(t=>{const a=e.player.wrapper;document.fullscreenElement?a.classList.add("fullscreen"):a.classList.remove("fullscreen")})),{caption:"",css:e.options.controls,panel:{tagName:"div",className:"panel",thumb:{tagName:"figure",className:"thumb",img:{src:""},caption:{tagName:"figCaption",className:"caption"}},rec:{tagName:"a",className:"rec",title:"Live",href:"#"},play:{tagName:"a",className:"play",title:"Play",href:"#",onclick:function(){return e.ui.onaction("play",e.player,e),e.player.play(),!1}},pause:{tagName:"a",className:"pause",title:"Pause",href:"#",onclick:function(){return e.ui.onaction("pause",e.player,e),e.player.pause(),!1}},step:{tagName:"a",css:["step","disabled"],title:"Step",href:"#",onclick:function(){return e.ui.onaction("step",e.player,e),e.player.step(),!1}},stop:{tagName:"a",className:"stop",title:"Stop",href:"#",onclick:function(){return e.ui.onaction("stop",e.player,e),e.player.stop(),!1}},lapse:{tagName:"label",className:"lapse",title:"Time elapsed / Time Total",text:"0:00"},live:{tagName:"label",className:"live",text:"Live Feed"},progress:{value:0,max:100,onmousemove:function(t){let a=~~(t.offsetX/this.offsetWidth*100),s=e.player.frameAt(e.player.indexAt(a));s?(e.ui.thumb.show=!0,e.ui.thumb.img.src=(e.player.thumbBase()||e.player.frameBase())+(s.th||s.f),e.ui.thumb.img.onload=function(){const t=e.ui.thumb.img.naturalWidth||e.ui.thumb.img.width;e.ui.thumb.style.width=t+"px"},void 0!==s.tc&&(e.ui.thumb.caption=s.tc),e.ui.thumb.style.left=this.offsetLeft+t.offsetX-e.ui.thumb.clientWidth/2+"px"):e.ui.thumb.show=!1},onmouseleave:function(){e.ui.thumb.show=!1},onclick:function(t){let a=~~(t.offsetX/this.offsetWidth*100),s=e.player.indexAt(a);e.player.jumpTo(s),e.ui.onaction("progress",e.player,e)}},frames:{tagName:"label",className:"frames",title:"Current Frame / Total Frames",text:"0"},fullscreen:{tagName:"a",className:"fullscreen",title:"Full Screen",href:"#",onclick:function(t){const a=e.player.wrapper;return a.classList.contains("fullscreen")?(e.ui.onaction("exit-fullscreen",e.player,e),document.exitFullscreen()):(e.ui.onaction("fullscreen",e.player,e),a.requestFullscreen()),!1}}},onaction:function(t,a,s){e.options.onaction(t,a,s)},onplay:function(t){e.options.onplay(t)},onstop:function(t){e.options.onstop(t,uiPlayer)}}}_fmtTime(e){let t=(e=e.toFixed(2)).split(".")[1]||"00";return(~~(e/60)+"").padStart(2,"0")+":"+(~~(e/60%1*60)+"").padStart(2,"0")+"."+t}_formatMillis(e){function t(e,t){return("00"+e).slice(-1*(t||2))}const a=Math.floor(e/1e3/60/60),s=Math.floor(60*(e/1e3/60/60-a)),n=Math.floor(60*(60*(e/1e3/60/60-a)-s)),i=parseInt(e%1e3/100);return t(a)+":"+t(s)+":"+t(n)+"."+t(i,3)}}function TimerSrc(e,t){let a,s,n,i,o={};o.interval=e,o.checker=50,o.status="init";let r=(new Date).getTime();return a=r-e,o.call=function(e){return t=e,o},o.nocall=function(){return t=null,o},o.exec=function(){return t&&t(),a=(new Date).getTime(),o},o.check=function(){return n&&n(),o},o.play=function(){return n=o.step,o.status="running",o},o.pause=function(){return n=null,o.status="paused",o},o.destroy=function(){for(var e in n=null,clearInterval(s),s=null,o)o[e]=null,delete o[e];o.status="destroyed"},o.step=function(){return r=(new Date).getTime(),i=Math.max(0,o.interval-(r-a)),0===i&&(i=o.interval,a=(new Date).getTime(),t&&t()),o},o.slow=function(){return o.interval=1e3,o},o.fast=function(){return o.interval=e,o},s=setInterval(o.check,o.checker),o}class VideoND extends HTMLElement{constructor(){super(),this._root=this;const e=this,t={autoplay:!1,controls:!1,loop:!1,live:!1,width:"auto",height:"auto",poster:"",preload:"auto",src:"",cc:"auto",caption:"",fullscreen:!1,fps:"",speed:!1,autosize:"auto",sizes:{}||[],thumbs:"auto"},a={};for(let e in t)a[e]=this.getAttribute(e)||this.hasAttribute(e)||t[e];a.onstart=function(t){e.onstart&&e.onstart(t)},a.onload=function(t){e.onload&&e.onload(t)},a.onrender=function(t){e.onrender&&e.onrender(t,s.wrapper,s,s.player.canvas,s.player.ctx)},this.style.display="block",this.className="ndjp";const s=new NDJPlayer(a.src,this,a)}setCaption(e){this._root.querySelector("caption").innerText=e}static get observedAttributes(){return["width","height","caption"]}attributeChangedCallback(e,t,a){"caption"===e&&this.setCaption(a)}}document.addEventListener("DOMContentLoaded",(function(){window.customElements.define("video-nd",VideoND)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=ndjson-player.headless.min.js.map
